openapi: 3.0.3
info:
  title: Swagger Petstore - OpenAPI 3.0
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification. 
  contact:
    email: apiteam@swagger.io
    url: https://example.com/support
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
servers: 
  - url: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJPbmxpbmUgSldUIEJ1aWxkZXIiLCJpYXQiOjE1NTA2OTkyNDgsImV4cCI6MjExNzA1MTI0OCwiYXVkIjoiIiwic3ViIjoiIn0.tqitpZDE4rRT9TFKz7WOn0YPufQwriU2Brq3--pWXUY
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      description: "Use Bearer token for authorization. Example: Bearer 1235"
tags:
  - name: pet
    description: Operations related to pets
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: store
    description: Access to Petstore orders
    externalDocs:
      description: Find out more about our store
      url: http://swagger.io
  - name: user
    description: Operations about user
paths:
  /pet:
    put:
      tags:
        - pet
      summary: Update an existing pet
      description: Update an existing pet by Id
      operationId: updatePet
      requestBody:
        description: Update an existent pet in the store
        content:
          application/json:
           example:
            schema:
              $ref: '#/components/schemas/Pet'
          application/xml:
           example:
            schema:
              $ref: '#/components/schemas/Pet'
          application/x-www-form-urlencoded:
           example:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
             example:
              schema:
                $ref: '#/components/schemas/Pet'
            application/xml:
             example:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        '422':
          description: Validation exception
    post:
      tags:
        - pet
      summary: Add a new pet to the store
      description: Add a new pet to the store
      operationId: addPet
      requestBody:
        description: Add a new pet to the store
        content:
          application/json:
           example:
            schema:
              $ref: '#/components/schemas/Pet'
          application/xml:
           example:
            schema:
              $ref: '#/components/schemas/Pet'
          application/x-www-form-urlencoded:
           example:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
             example:
              schema:
                $ref: '#/components/schemas/Pet'
            application/xml:
             example:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  /pet/find-by-status:
    get:
      tags:
        - pet
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            $ref: '#/components/schemas/Resources'
            type: string
            default: available
            enum:
              - available
              - pending
              - sold
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
             example:
              schema:
                $ref: '#/components/schemas/Resources'
                type: array
                minItems: 1
                maxItems: 100
                items:
                  $ref: '#/components/schemas/Pet'
            application/xml:
             example:
              schema:
                $ref: '#/components/schemas/Resources'
                type: array
                minItems: 1
                maxItems: 100
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid status value
  /pet/find-by-tags:
    get:
      tags:
        - pet
      summary: Finds Pets by tags
      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
      operationId: findPetsByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: false
          explode: true
          schema:
            $ref: '#/components/schemas/Resources'
            type: array
            minItems: 1
            maxItems: 100
            items:
              type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
             example:
              schema:
                $ref: '#/components/schemas/Resources'
                type: array
                minItems: 1
                maxItems: 100
                items:
                  $ref: '#/components/schemas/Pet'
            application/xml:
             example:
              schema:
                $ref: '#/components/schemas/Resources'
                type: array
                minItems: 1
                maxItems: 100
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid tag value
  /pet/{petId}:
    get:
      tags:
        - pet
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPetById
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          schema:
            $ref: '#/components/schemas/Resources'
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
             example:
              schema:
                $ref: '#/components/schemas/Pet'
            application/xml:
             example:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
    post:
      tags:
        - pet
      summary: Updates a pet in the store with form data
      description: Update pet with form data
      operationId: updatePetWithForm
      requestBody:
        content:
          'application/json':
           example:
            schema:
              $ref: '#/components/schemas/Resources'
              type: object
      parameters:
        - name: petId
          in: path
          description: ID of pet that needs to be updated
          required: true
          schema:
            $ref: '#/components/schemas/Resources'
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of pet that needs to be updated
          schema:
            $ref: '#/components/schemas/Resources'
            type: string
        - name: status
          in: query
          description: Status of pet that needs to be updated
          schema:
            $ref: '#/components/schemas/Resources'
            type: string
      responses:
        '200':
          description: Success
    delete:
      tags:
        - pet
      summary: Deletes a pet
      description: Deletes a pet from the store
      operationId: deletePet
      parameters:
        - name: api_key
          in: header
          description: API key for authorization
          required: false
          schema:
            $ref: '#/components/schemas/Resources'
            type: string
        - name: petId
          in: path
          description: Pet ID to delete
          required: true
          schema:
            $ref: '#/components/schemas/Resources'
            type: integer
            format: int64
      responses:
        '200':
          description: Success
  /pet/{petId}/upload-image:
    post:
      tags:
        - pet
      summary: Uploads an image
      description: Upload an image for a pet
      operationId: uploadFile
      parameters:
        - name: petId
          in: path
          description: ID of pet to upload image for
          required: true
          schema:
            $ref: '#/components/schemas/Resources'
            type: integer
            format: int64
        - name: additional_metadata
          in: query
          description: Additional data to pass to the server
          schema:
            $ref: '#/components/schemas/Resources'
            type: string
      responses:
        '200':
          description: Success
      requestBody:
        content:
          application/json:
           example:
            schema:
              $ref: '#/components/schemas/Resources'
              type: object
              properties:
                file:
                  type: string
security:
    - BearerAuth: []